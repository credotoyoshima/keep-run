# 「Keep Run」タスク管理アプリ 要件・技術スタック定義書

## 1. プロジェクト概要

### 1.1 プロジェクト名
Keep Run - タスク管理アプリ

### 1.2 コンセプト
「己を追い、走り続ける」をモットーとした、生活の流れに沿った柔軟な時間ブロック管理と習慣形成を支援するアプリケーション。細かい時間管理ではなく、包括的な時間ブロックで日々のイレギュラーに対応し、持続可能な生産性向上を実現する。

### 1.3 主要機能
- 柔軟な時間ブロックベースのDAY管理
- 日々の変動に対応するToDo管理
- 14日間集中型の習慣形成（継続機能）
- 日次評価による成長記録
- 必要最小限の設定機能
- PWAによるプッシュ通知

## 2. 機能要件

### 2.1 ユーザー認証
- ユーザー登録・ログイン機能
- パスワードリセット機能
- OAuth連携（Google、GitHub）

### 2.2 DAY機能（コア機能）
- **時間ブロック管理**
  - 生活の流れに沿ったブロック設定（例：「起床〜出勤」「午前業務」「午後業務」「帰宅後」）
  - 包括的な時間指定（細かい時間のズレを吸収）
  - 各ブロック内に複数のタスクを配置
  - 進捗表示（完了タスク数/全タスク数、パーセンテージ）
- **ブロック内タスク管理**
  - ブロック内にタスクを追加
  - チェックボックスでタスク完了状態を管理
  - 「新しいタスクを追加」ボタン
  - 業務ブロックには「ToDo処理」を設定可能
- **進捗状況可視化**
  - 時間ブロックごとの進捗率表示
  - 全体進捗率の大きな表示
  - プログレスバーによる視覚的表現

### 2.3 テンプレート機能
- **DAYテンプレート管理**
  - 生活パターンに応じたテンプレート保存（例：「平日」「休日」「在宅勤務」）
  - 時間ブロックとタスクの組み合わせを保存
- **テンプレート選択**
  - ドロップダウンメニューからのテンプレート選択
  - ワンタップでテンプレートを適用

### 2.4 ToDo機能
- **ToDo管理**
  - 日々変化する具体的なタスクの管理
  - ToDoの作成・表示・編集・削除
  - 時間ブロックとは独立した管理
  - 完了したToDoは自動アーカイブ
- **フィルタリング**
  - 「すべて」「今日」「明日」「今週」「重要」でフィルター
- **統計表示**
  - ACTIVE（アクティブなタスク数）
  - TODAY（今日のタスク数）
  - DONE（完了タスク数）
- **アーカイブ**
  - 上スワイプ操作でアーカイブを表示
  - アーカイブからの復元機能

### 2.5 継続機能
- **習慣設定**
  - 5分で完了できる習慣を1つだけ設定
  - カテゴリー選択（運動、健康、学習、その他）
  - 14日間の継続期間（固定）
- **進捗管理**
  - 大きな円形プログレスバーで視覚化
  - 連続日数の大きな表示
  - ワンタップで完了記録
- **モチベーション機能**
  - 日数に応じた段階的な励ましメッセージ
  - 達成時の特別な演出
- **3日坊主対策**
  - 3日目の特別警告表示
  - プッシュ通知での強いリマインド
  - 失敗も含めた履歴管理

### 2.6 評価機能
- **日次評価**
  - 5段階の星評価
  - オプションのコメント入力
  - クイック選択ボタン（最悪〜最高）
- **評価表示**
  - カレンダービューでの月間表示
  - ヒートマップによる長期傾向の可視化
  - 月間サマリー（TOP DAYS、インサイト）
- **統計機能**
  - 月間平均スコア
  - 連続記録日数
  - 記録率の表示

### 2.7 設定機能
- **プロフィール設定**
  - ユーザー名変更
  - プロフィール画像設定
- **通知設定**
  - プッシュ通知の許可設定
  - 各機能のリマインダー時刻設定
  - 通知のON/OFF切り替え
- **テンプレート管理**
  - テンプレート一覧表示
  - テンプレートの編集・削除
- **アカウント設定**
  - パスワード変更
  - データエクスポート
  - アカウント削除

### 2.8 通知機能（PWA）
- **プッシュ通知**
  - 時間ブロックの切り替わりタイミング
  - 習慣実行のリマインダー
  - 評価入力の促し（1日の終わり）
  - 3日坊主警告
- **通知の実装**
  - Service Workerによるバックグラウンド通知
  - Web Push APIの活用
  - iOS（16.4以降）、Android、デスクトップ対応

### 2.9 UI/UX
- 下部タブナビゲーション（DAY・ToDo・継続・評価・設定）
- Notion風のミニマルでモノクロームなデザイン
- SVGラインアートによる統一されたアイコン
- 直感的な操作性とスムーズなアニメーション

## 3. データモデル（Prisma）

### 3.1 User
```prisma
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String?
  avatarUrl       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  dayTemplates    DayTemplate[]
  activeDays      ActiveDay[]
  todos           Todo[]
  evaluations     DailyEvaluation[]
  habits          ContinuousHabit[]
  habitHistories  HabitHistory[]
}
```

### 3.2 DayTemplate
```prisma
model DayTemplate {
  id              String    @id @default(uuid())
  name            String
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  timeBlocks      TemplateTimeBlock[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
```

### 3.3 TemplateTimeBlock
```prisma
model TemplateTimeBlock {
  id              String    @id @default(uuid())
  title           String
  startTime       String    // 柔軟な時間表記（例："起床時"、"9:00頃"）
  orderIndex      Int
  templateId      String
  template        DayTemplate @relation(fields: [templateId], references: [id])
  tasks           TemplateTask[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
```

### 3.4 TemplateTask
```prisma
model TemplateTask {
  id              String    @id @default(uuid())
  title           String
  orderIndex      Int
  blockId         String
  block           TemplateTimeBlock @relation(fields: [blockId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
```

### 3.5 ActiveDay
```prisma
model ActiveDay {
  id              String    @id @default(uuid())
  date            DateTime
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  templateId      String?
  timeBlocks      ActiveTimeBlock[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([userId, date])
}
```

### 3.6 ActiveTimeBlock
```prisma
model ActiveTimeBlock {
  id              String    @id @default(uuid())
  title           String
  startTime       String
  orderIndex      Int
  completionRate  Float     @default(0)
  dayId           String
  day             ActiveDay @relation(fields: [dayId], references: [id])
  tasks           ActiveTask[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
```

### 3.7 ActiveTask
```prisma
model ActiveTask {
  id              String    @id @default(uuid())
  title           String
  completed       Boolean   @default(false)
  orderIndex      Int
  blockId         String
  block           ActiveTimeBlock @relation(fields: [blockId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
```

### 3.8 Todo
```prisma
model Todo {
  id              String    @id @default(uuid())
  title           String
  description     String?
  completed       Boolean   @default(false)
  archived        Boolean   @default(false)
  dueDate         DateTime?
  priority        String?   // high, medium, low
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
```

### 3.9 ContinuousHabit
```prisma
model ContinuousHabit {
  id              String    @id @default(uuid())
  title           String
  category        String    // exercise, health, learning, other
  startDate       DateTime
  targetDays      Int       @default(14)
  reminderTime    String?   // HH:mm format
  isActive        Boolean   @default(true)
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  records         HabitRecord[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
```

### 3.10 HabitRecord
```prisma
model HabitRecord {
  id              String    @id @default(uuid())
  date            DateTime
  completed       Boolean
  habitId         String
  habit           ContinuousHabit @relation(fields: [habitId], references: [id])
  createdAt       DateTime  @default(now())
}
```

### 3.11 HabitHistory
```prisma
model HabitHistory {
  id              String    @id @default(uuid())
  title           String
  category        String
  startDate       DateTime
  endDate         DateTime
  totalDays       Int
  completedDays   Int
  status          String    // completed, failed, abandoned
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
}
```

### 3.12 DailyEvaluation
```prisma
model DailyEvaluation {
  id              String    @id @default(uuid())
  date            DateTime
  rating          Int       // 1-5
  comment         String?
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([userId, date])
}
```

## 4. 画面構成

### 4.1 認証関連
- スプラッシュ画面
- ログイン画面
- 新規登録画面
- パスワードリセット画面

### 4.2 メイン画面
- **DAY画面**
  - テンプレート選択ドロップダウン
  - 時間ブロック一覧
  - 各ブロック内のタスクリスト
  - 全体進捗表示
  - 「+ 新しい時間ブロック」ボタン
  
- **ToDo画面**
  - 統計ダッシュボード
  - フィルターチップ
  - ToDo一覧
  - アーカイブ表示（上スワイプ）
  - 「+」FABボタン
  
- **継続画面**
  - 大きな円形プログレスバー
  - 習慣タイトルとカテゴリー
  - 完了ボタン
  - 履歴リスト
  
- **評価画面**
  - カレンダー/ヒートマップ切り替え
  - 統計サマリー
  - 評価入力フォーム
  - 月間サマリー
  
- **設定画面**
  - プロフィール設定
  - 通知設定
  - テンプレート管理
  - アカウント設定

### 4.3 モーダル・ダイアログ
- テンプレート保存モーダル
- 時間ブロック追加/編集モーダル
- ToDo追加/編集モーダル
- 習慣設定モーダル
- 評価入力モーダル

## 5. 技術スタック

### 5.1 フロントエンド
- **Next.js 14 (App Router)**
  - React Server Components
  - Server Actions
  - PWA対応（next-pwa）
- **UI/スタイリング**
  - Tailwind CSS
  - Shadcn/UI
  - Lucide Icons（SVGアイコン）

### 5.2 バックエンド
- **Next.js API Routes / Server Actions**
- **Prisma ORM**
  - スキーマ定義
  - マイグレーション管理
  - 型安全なデータアクセス
- **Supabase**
  - PostgreSQL データベース
  - 認証システム
  - ストレージ
  - リアルタイムAPI

### 5.3 状態管理・データフェッチング
- **Zustand**（グローバル状態管理）
- **SWR**
  - データキャッシュ
  - 楽観的更新
  - 自動再取得

### 5.4 認証
- **NextAuth.js**
  - Supabaseアダプター
  - OAuth連携（Google、GitHub）
  - セッション管理

### 5.5 通知システム
- **Service Worker**
- **Web Push API**
- **Notification API**

### 5.6 開発ツール
- **TypeScript**
- **ESLint / Prettier**
- **Jest / React Testing Library**

## 6. 非機能要件

### 6.1 パフォーマンス
- アプリ起動時間: 3秒以内
- 画面遷移: 300ms以内
- First Contentful Paint: 1.5秒以内
- オフライン対応（PWA）

### 6.2 セキュリティ
- HTTPS通信のみ
- JWTによる認証
- Row Level Security (RLS)
- CSRF対策

### 6.3 アクセシビリティ
- WAI-ARIA準拠
- キーボード操作対応
- 適切なコントラスト比

### 6.4 デプロイ環境
- **Vercel**
  - CI/CD連携
  - エッジ配信
  - 自動プレビュー

## 7. 開発フェーズ

### 7.1 フェーズ1: 基盤構築 (3週間)
- 開発環境構築
- Prismaスキーマ設計
- 認証システム実装
- UIコンポーネント設計
- PWA基本設定

### 7.2 フェーズ2: コア機能 (4週間)
- DAY機能実装
- テンプレート機能実装
- ToDo機能実装
- 基本的な通知機能

### 7.3 フェーズ3: 追加機能 (3週間)
- 継続機能実装
- 評価機能実装
- 設定機能完成
- 通知システム完成

### 7.4 フェーズ4: 最終調整 (2週間)
- UI/UX改善
- パフォーマンス最適化
- テスト・デバッグ
- PWA最適化

## 8. 成功基準

- ユーザーが無理なく日々のタスクを管理できる
- 生活リズムに合わせた柔軟な時間管理が可能
- 小さな習慣から始めて継続できる仕組み
- 成長を実感できる可視化機能
- ストレスフリーな操作性

---

作成日: 2025年5月24日
更新日: 2025年7月9日